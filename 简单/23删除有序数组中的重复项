/**
给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。

考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：

更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。
返回 k 。
判题标准:

系统会用下面的代码来测试你的题解:

int[] nums = [...]; // 输入数组
int[] expectedNums = [...]; // 长度正确的期望答案

int k = removeDuplicates(nums); // 调用

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
如果所有断言都通过，那么您的题解将被 通过。

 

示例 1：

输入：nums = [1,1,2]
输出：2, nums = [1,2,_]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
示例 2：

输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
 

提示：

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums 已按 非严格递增 排列
**/

解法三： 利用HashSet的特性数据唯一性自动删除重复值，，比list少一个判断，但没有意义，也无法完成数组原地删除重复数据的要求


-----------------------------------------------------------------------

解法二： 双指针，原地删除数组数据，在进行数组指向是下一位指向非重复数据值。（官方解法也使用这种）
解题思路：同解法一,
    public int removeDuplicates(int[] nums) {
        if(nums == null) {
            return 0;
        } else if( nums.length < 2) {
            return 1;
        }
        int s = 1;
        //解法二：双指针，重复数据跳过指向
        for(int i=1; i< nums.length; i++) {
            if(nums[i] != nums[i-1]) {
                nums[s] = nums[i];
                s++;
            }
        }
        return s;
    }

---------------------------------------------------------------

解法一：暴力删除
解题思路： 后一位与前一位数据进行比较，不同的话就行技术，同时记录不同值
待改进：未进行数组原地删除重复值，而是利用了list重新组了一个。

public int removeDuplicates(int[] nums) {
    if(nums == null) {
        return 0;
    } else if( nums.length < 2) {
        return 1;
    }
    int s = 1;
    List<Integer> list = new ArrayList<>();
    list.add(nums[0]);
    for(int i=1; i< nums.length; i++) {
        if(nums[i] != nums[i-1]) {
            list.add(nums[i]);
            s++;
        }
    }
    Integer[] integerArray = list.toArray(new Integer[s]);
    // 将 Integer[] 转换为 int[]
    for (int i = 0; i < s; i++) {
        nums[i] = integerArray[i];
    }
    return s;
}
