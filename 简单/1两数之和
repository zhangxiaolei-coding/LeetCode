/**
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。

你可以按任意顺序返回答案。

 

示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
示例 2：

输入：nums = [3,2,4], target = 6
输出：[1,2]
示例 3：

输入：nums = [3,3], target = 6
输出：[0,1]
 

提示：

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
只会存在一个有效答案
 

进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？
**/

解法1：暴力解决
class Solution {
    public int[] twoSum(int[] nums, int target) {
        //暴力解法
        Boolean bol = false;
        for(int i=0; i<nums.length; i++) {
            int y;
            int yus = target - nums[i];
            for(y=i+1; y<nums.length; y++) {
                if(yus == nums[y]) {
                    bol = true;
                    break;
                }
            }
            if(bol) {
                return new int[]{i,y};
            }
        }
        return null;
    }
}
解题思路：拿到数组的一个数字后，跟target进行计算，然后判断获取两个数值之间的差数，在数组中是否存在，存在的话返回两个数值的数组下标。
优点：思路简单，易于理解；
缺点：求解的算法中嵌套了两层for循环，时间复杂度较高O(n^2);

