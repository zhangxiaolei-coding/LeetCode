/**
将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 
  1 -> 2 -> 4
  1 -> 3 -> 4
  1 -> 1 -> 2 -> 3 -> 4 -> 4

示例 1：

输入：l1 = [1,2,4], l2 = [1,3,4]
输出：[1,1,2,3,4,4]
示例 2：

输入：l1 = [], l2 = []
输出：[]
示例 3：

输入：l1 = [], l2 = [0]
输出：[0]
 

提示：

两个链表的节点数目范围是 [0, 50]
-100 <= Node.val <= 100
l1 和 l2 均按 非递减顺序 排列
**/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

解法二：递归
解题思路：两个有序链表合并为一个链表的问题，其实是比较哪个节点小就先存哪个节点。这里发现每次的操作都是相同的，即母问题与子问题一致，可以采用递归的方法进行，比较谁小就先存谁。
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        //解法二 递归
        if(list1 == null) {
            return list2;
        } else if(list2 == null) {
            return list1;
        } else if(list1.val > list2.val) {
            list2.next = mergeTwoLists(list1, list2.next);
            return list2;
        } else {
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;
        }
    }
}

--------------------------------------------------------------------
解法一：按链表顺序比较插入（暴力）
解题思路：针对连个链表，进行比较，将小的数值存入链表3，知道一方结束，剩余一方按顺序存入链表3. 时间复杂度O(n)
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null) {
            return list2;
        } else if(list2 == null) {
            return list1;
        }
        ListNode list = new ListNode();
        ListNode node = list;
        while(list1 != null && list2 != null) {
            if(list1.val > list2.val) {
                node.val = list2.val;
                list2 = list2.next;
            } else {
                node.val = list1.val;
                list1 = list1.next;
            }
            node.next = new ListNode();
            node = node.next;
        }
        if(list1 == null) {
            node.val=list2.val;
            node.next = list2.next;
        } else {
            node.val=list1.val;
            node.next = list1.next;
        }
        return list;
    }
}
